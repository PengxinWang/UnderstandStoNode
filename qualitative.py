import torch
import matplotlib.pyplot as plt
from model import *
from data import get_dataloader
from utils import unnormalize
import os
import numpy as np
import warnings

warnings.filterwarnings("ignore")

def generate_noise(img, unet_ck_path, in_channels):
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

    unet = UNet(in_channels=in_channels, out_channels=in_channels).to(device)
    model_dict = torch.load(unet_ck_path)
    unet.load_state_dict(model_dict)
    unet.eval()

    img = img.to(device)
    with torch.no_grad():
        img_noisy = unet(img)
    
    img_noisy = unnormalize(img_noisy).permute(0, 2, 3, 1).cpu().numpy()
    return img_noisy

def main():
    input_dir = './data/CIFAR10'
    in_channels = 3
    unet_ck_dir = './checkpoints/unet'
    epochs = range(10, 51, 10)  # Epochs 10, 20, 30, 40, 50
    batch_size = 1

    # Load one image from the dataset
    dataloader = get_dataloader(data_dir=input_dir, train=True, val=False, batch_size=batch_size)
    img, label = next(iter(dataloader))

    # Unnormalize and convert the original image for plotting
    img_original = unnormalize(img).permute(0, 2, 3, 1).cpu().numpy()

    plt.figure(figsize=(18, 5))

    # Plot the original image
    plt.subplot(1, len(epochs) + 1, 1)
    plt.imshow(img_original[0])
    plt.title('Original Image')
    plt.axis('off')

    for i, epoch in enumerate(epochs):
        unet_ck_path = os.path.join(unet_ck_dir, f'unet_epoch{epoch}.pt')
        img_noisy = generate_noise(img, unet_ck_path, in_channels)

        # Plot the noisy image generated by UNet at each epoch
        plt.subplot(1, len(epochs) + 1, i + 2)
        plt.imshow(img_noisy[0])
        plt.title(f'Epoch {epoch}')
        plt.axis('off')

    plt.suptitle('Original and Shifted Images by Different UNet Epochs')
    plt.tight_layout()
    plt.savefig(f'./qualitative_results/vis_shift.png')
    plt.show()

if __name__ == '__main__':
    main()
